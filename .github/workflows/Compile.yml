name: Compile

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache
          ~/android-ndk-r16b
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt install -y nano bc bison ca-certificates curl flex gcc git libc6-dev libssl-dev openssl python-is-python3 ssh wget zip zstd sudo make clang gcc-arm-linux-gnueabi software-properties-common build-essential libarchive-tools gcc-aarch64-linux-gnu

    - name: Clone AOSP Clang
      if: steps.cache.outputs.cache-hit != 'true'
      run: git clone https://github.com/Nicklas373/aosp-clang.git -b r383902 --depth=1

    - name: Download and extract Android NDK
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        wget https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip
        unzip android-ndk-r16b-linux-x86_64.zip

    - name: Set up environment variables
      run: |
        echo "CLANG_PATH=${GITHUB_WORKSPACE}/aosp-clang/bin" >> $GITHUB_ENV
        echo "PATH=${GITHUB_WORKSPACE}/aosp-clang/bin:${PATH}" >> $GITHUB_ENV
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE=${GITHUB_WORKSPACE}/android-ndk-r16b/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        echo "CROSS_COMPILE_ARM32=${GITHUB_WORKSPACE}/android-ndk-r16b/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-" >> $GITHUB_ENV

    - name: Build the kernel
      env:
        CLANG_PATH: ${{ env.CLANG_PATH }}
        PATH: ${{ env.PATH }}
        CLANG_TRIPLE: ${{ env.CLANG_TRIPLE }}
        CROSS_COMPILE: ${{ env.CROSS_COMPILE }}
        CROSS_COMPILE_ARM32: ${{ env.CROSS_COMPILE_ARM32 }}
      run: |
        make CC=clang O=out ARCH=arm64 CROSS_COMPILE=${CROSS_COMPILE} CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} lineage-msm8998-yoshino-poplar_dsds_defconfig
        make CC=clang O=out ARCH=arm64 CROSS_COMPILE=${CROSS_COMPILE} CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} -j$(nproc --all)

    - name: Create Telegram script
      run: |
        cat << 'EOF' > kirimtele.sh
        #!/bin/bash
        TG_SUPER=0
        TG_TOKEN=5136791856:AAFxUsMFfPD7E0CFHKUCBIlUOUOI0yFq59Q
        CHATID=-1002171568705
        TOPICID=
        BOT_MSG_URL="https://api.telegram.org/bot$TG_TOKEN/sendMessage"
        BOT_BUILD_URL="https://api.telegram.org/bot$TG_TOKEN/sendDocument"
        tg_post_msg(){
            if [ $TG_SUPER = 1 ]; then
                RESPONSE=$(curl -s -X POST "$BOT_MSG_URL" \
                -d chat_id="$CHATID" \
                -d message_thread_id="$TOPICID" \
                -d "disable_web_page_preview=true" \
                -d "parse_mode=html" \
                -d text="$1")
            else
                RESPONSE=$(curl -s -X POST "$BOT_MSG_URL" \
                -d chat_id="$CHATID" \
                -d "disable_web_page_preview=true" \
                -d "parse_mode=html" \
                -d text="$1")
            fi
            echo "Response: $RESPONSE"
        }
        tg_post_build(){
            MD5CHECK=$(md5sum "$1" | cut -d' ' -f1)
            if [ $TG_SUPER = 1 ]; then
                RESPONSE=$(curl --no-progress-meter -F document=@"$1" "$BOT_BUILD_URL" \
                -F chat_id="$CHATID"  \
                -F message_thread_id="$TOPICID" \
                -F "disable_web_page_preview=true" \
                -F "parse_mode=Markdown" \
                -F caption="$2
        *MD5 Checksum:* \`$MD5CHECK\`")
            else
                RESPONSE=$(curl --no-progress-meter -F document=@"$1" "$BOT_BUILD_URL" \
                -F chat_id="$CHATID"  \
                -F "disable_web_page_preview=true" \
                -F "parse_mode=Markdown" \
                -F caption="$2
        *MD5 Checksum:* \`$MD5CHECK\`")
            fi
            echo "Response: $RESPONSE"
        }
        case "$1" in
          file)
            PESAN=$(tg_post_build "$2" "$3" | grep '"ok":')
            if (echo ${PESAN} | grep '"ok":true' > /dev/null 2>&1); then
            echo "berhasil kirim file ke ID ${CHATID}"
            else
            echo "gagal kirim file ke ID ${CHATID}"
            echo "Alasan: ${PESAN}"
            fi
            ;;
          msg)
            PESAN=$(tg_post_msg "$2" | grep '"ok":')
            if (echo ${PESAN} | grep '"ok":true' > /dev/null 2>&1); then
            echo "Berhasil kirim pesan ke ID ${CHATID}"
            else
            echo "Gagal kirim pesan ke ID ${CHATID}"
            echo "Alasan: ${PESAN}"
            fi
            ;;
          help)
            echo "Cara Pemakaian:"
            echo ""
            echo "- Untuk kirim file"
            echo 'kirimtele.sh file "nama-file" "caption"'
            echo "- Untuk kirim pesan"
            echo 'kirimtele.sh msg "caption"'
            ;;
          *)
            echo "command tidak ditemukan"
            echo "ketik kirimtele.sh help"
            echo "untuk cara penggunaan"
            ;;
        esac
        EOF
        chmod +x kirimtele.sh

    - name: Upload kernel artifacts to Telegram
      run: |
        ./kirimtele.sh file "out/arch/arm64/boot/Image.gz-dtb" "Kernel Image with DTB"
